// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `csi.proto`

//! Generated by "/opt/gopath/src/github.com/kata-containers/kata-containers/src/libs/protocols/build.rs" ("build_script_build")

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeStatsResponse {
    // message fields
    pub usage: ::protobuf::RepeatedField<VolumeUsage>,
    pub volume_condition: ::protobuf::SingularPtrField<VolumeCondition>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VolumeStatsResponse {
    fn default() -> &'a VolumeStatsResponse {
        <VolumeStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl VolumeStatsResponse {
    pub fn new() -> VolumeStatsResponse {
        ::std::default::Default::default()
    }

    // repeated .grpc.VolumeUsage usage = 1;


    pub fn get_usage(&self) -> &[VolumeUsage] {
        &self.usage
    }
    pub fn clear_usage(&mut self) {
        self.usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: ::protobuf::RepeatedField<VolumeUsage>) {
        self.usage = v;
    }

    // Mutable pointer to the field.
    pub fn mut_usage(&mut self) -> &mut ::protobuf::RepeatedField<VolumeUsage> {
        &mut self.usage
    }

    // Take field
    pub fn take_usage(&mut self) -> ::protobuf::RepeatedField<VolumeUsage> {
        ::std::mem::replace(&mut self.usage, ::protobuf::RepeatedField::new())
    }

    // .grpc.VolumeCondition volume_condition = 2;


    pub fn get_volume_condition(&self) -> &VolumeCondition {
        self.volume_condition.as_ref().unwrap_or_else(|| VolumeCondition::default_instance())
    }
    pub fn clear_volume_condition(&mut self) {
        self.volume_condition.clear();
    }

    pub fn has_volume_condition(&self) -> bool {
        self.volume_condition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_volume_condition(&mut self, v: VolumeCondition) {
        self.volume_condition = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_volume_condition(&mut self) -> &mut VolumeCondition {
        if self.volume_condition.is_none() {
            self.volume_condition.set_default();
        }
        self.volume_condition.as_mut().unwrap()
    }

    // Take field
    pub fn take_volume_condition(&mut self) -> VolumeCondition {
        self.volume_condition.take().unwrap_or_else(|| VolumeCondition::new())
    }
}

impl ::protobuf::Message for VolumeStatsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.usage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.volume_condition {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.usage)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.volume_condition)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.usage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.volume_condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.usage {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.volume_condition.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VolumeStatsResponse {
        VolumeStatsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VolumeUsage>>(
                    "usage",
                    |m: &VolumeStatsResponse| { &m.usage },
                    |m: &mut VolumeStatsResponse| { &mut m.usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VolumeCondition>>(
                    "volume_condition",
                    |m: &VolumeStatsResponse| { &m.volume_condition },
                    |m: &mut VolumeStatsResponse| { &mut m.volume_condition },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<VolumeStatsResponse>(
                    "VolumeStatsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VolumeStatsResponse {
        static mut instance: ::protobuf::lazy::Lazy<VolumeStatsResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(VolumeStatsResponse::new)
        }
    }
}

impl ::protobuf::Clear for VolumeStatsResponse {
    fn clear(&mut self) {
        self.usage.clear();
        self.volume_condition.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VolumeStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeStatsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeUsage {
    // message fields
    pub available: u64,
    pub total: u64,
    pub used: u64,
    pub unit: VolumeUsage_Unit,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VolumeUsage {
    fn default() -> &'a VolumeUsage {
        <VolumeUsage as ::protobuf::Message>::default_instance()
    }
}

impl VolumeUsage {
    pub fn new() -> VolumeUsage {
        ::std::default::Default::default()
    }

    // uint64 available = 1;


    pub fn get_available(&self) -> u64 {
        self.available
    }
    pub fn clear_available(&mut self) {
        self.available = 0;
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: u64) {
        self.available = v;
    }

    // uint64 total = 2;


    pub fn get_total(&self) -> u64 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u64) {
        self.total = v;
    }

    // uint64 used = 3;


    pub fn get_used(&self) -> u64 {
        self.used
    }
    pub fn clear_used(&mut self) {
        self.used = 0;
    }

    // Param is passed by value, moved
    pub fn set_used(&mut self, v: u64) {
        self.used = v;
    }

    // .grpc.VolumeUsage.Unit unit = 4;


    pub fn get_unit(&self) -> VolumeUsage_Unit {
        self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit = VolumeUsage_Unit::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: VolumeUsage_Unit) {
        self.unit = v;
    }
}

impl ::protobuf::Message for VolumeUsage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.available = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.used = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.unit, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.available != 0 {
            my_size += ::protobuf::rt::value_size(1, self.available, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.used != 0 {
            my_size += ::protobuf::rt::value_size(3, self.used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unit != VolumeUsage_Unit::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.available != 0 {
            os.write_uint64(1, self.available)?;
        }
        if self.total != 0 {
            os.write_uint64(2, self.total)?;
        }
        if self.used != 0 {
            os.write_uint64(3, self.used)?;
        }
        if self.unit != VolumeUsage_Unit::UNKNOWN {
            os.write_enum(4, self.unit.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VolumeUsage {
        VolumeUsage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "available",
                    |m: &VolumeUsage| { &m.available },
                    |m: &mut VolumeUsage| { &mut m.available },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "total",
                    |m: &VolumeUsage| { &m.total },
                    |m: &mut VolumeUsage| { &mut m.total },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "used",
                    |m: &VolumeUsage| { &m.used },
                    |m: &mut VolumeUsage| { &mut m.used },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VolumeUsage_Unit>>(
                    "unit",
                    |m: &VolumeUsage| { &m.unit },
                    |m: &mut VolumeUsage| { &mut m.unit },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<VolumeUsage>(
                    "VolumeUsage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VolumeUsage {
        static mut instance: ::protobuf::lazy::Lazy<VolumeUsage> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(VolumeUsage::new)
        }
    }
}

impl ::protobuf::Clear for VolumeUsage {
    fn clear(&mut self) {
        self.available = 0;
        self.total = 0;
        self.used = 0;
        self.unit = VolumeUsage_Unit::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VolumeUsage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeUsage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(serde::Serialize, serde::Deserialize))]
pub enum VolumeUsage_Unit {
    UNKNOWN = 0,
    BYTES = 1,
    INODES = 2,
}

impl ::protobuf::ProtobufEnum for VolumeUsage_Unit {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VolumeUsage_Unit> {
        match value {
            0 => ::std::option::Option::Some(VolumeUsage_Unit::UNKNOWN),
            1 => ::std::option::Option::Some(VolumeUsage_Unit::BYTES),
            2 => ::std::option::Option::Some(VolumeUsage_Unit::INODES),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VolumeUsage_Unit] = &[
            VolumeUsage_Unit::UNKNOWN,
            VolumeUsage_Unit::BYTES,
            VolumeUsage_Unit::INODES,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<VolumeUsage_Unit>("VolumeUsage.Unit", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VolumeUsage_Unit {
}

impl ::std::default::Default for VolumeUsage_Unit {
    fn default() -> Self {
        VolumeUsage_Unit::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeUsage_Unit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeCondition {
    // message fields
    pub abnormal: bool,
    pub message: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VolumeCondition {
    fn default() -> &'a VolumeCondition {
        <VolumeCondition as ::protobuf::Message>::default_instance()
    }
}

impl VolumeCondition {
    pub fn new() -> VolumeCondition {
        ::std::default::Default::default()
    }

    // bool abnormal = 1;


    pub fn get_abnormal(&self) -> bool {
        self.abnormal
    }
    pub fn clear_abnormal(&mut self) {
        self.abnormal = false;
    }

    // Param is passed by value, moved
    pub fn set_abnormal(&mut self, v: bool) {
        self.abnormal = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VolumeCondition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.abnormal = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.abnormal != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.abnormal != false {
            os.write_bool(1, self.abnormal)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VolumeCondition {
        VolumeCondition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "abnormal",
                    |m: &VolumeCondition| { &m.abnormal },
                    |m: &mut VolumeCondition| { &mut m.abnormal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &VolumeCondition| { &m.message },
                    |m: &mut VolumeCondition| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<VolumeCondition>(
                    "VolumeCondition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VolumeCondition {
        static mut instance: ::protobuf::lazy::Lazy<VolumeCondition> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(VolumeCondition::new)
        }
    }
}

impl ::protobuf::Clear for VolumeCondition {
    fn clear(&mut self) {
        self.abnormal = false;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VolumeCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeCondition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tcsi.proto\x12\x04grpc\"n\n\x13VolumeStatsResponse\x12\"\n\x05usage\
    \x18\x01\x20\x03(\x0b2\x11.grpc.VolumeUsageB\0\x121\n\x10volume_conditio\
    n\x18\x02\x20\x01(\x0b2\x15.grpc.VolumeConditionB\0:\0\"\x9b\x01\n\x0bVo\
    lumeUsage\x12\x13\n\tavailable\x18\x01\x20\x01(\x04B\0\x12\x0f\n\x05tota\
    l\x18\x02\x20\x01(\x04B\0\x12\x0e\n\x04used\x18\x03\x20\x01(\x04B\0\x12&\
    \n\x04unit\x18\x04\x20\x01(\x0e2\x16.grpc.VolumeUsage.UnitB\0\",\n\x04Un\
    it\x12\x0b\n\x07UNKNOWN\x10\0\x12\t\n\x05BYTES\x10\x01\x12\n\n\x06INODES\
    \x10\x02\x1a\0:\0\":\n\x0fVolumeCondition\x12\x12\n\x08abnormal\x18\x01\
    \x20\x01(\x08B\0\x12\x11\n\x07message\x18\x02\x20\x01(\tB\0:\0B\x10\xa8\
    \xe2\x1e\x01\xb8\xe2\x1e\x01\xf8\xe1\x1e\x01\xc0\xe2\x1e\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}